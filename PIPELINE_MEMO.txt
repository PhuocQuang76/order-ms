DOCKER
create container
docker run -d \
  --name jenkins \
  -p 9090:8080 \
  -p 50000:50000 \
  -v ~/jenkins_home:/var/jenkins_home \
  -e JAVA_OPTS="-Xmx2048m -Xms1024m" \
  jenkins/jenkins:lts

localhost:9090
docker stop jenkins
docker rm -f jenkins

Install java in jenkins
# Access the container as root
docker exec -u 0 -it jenkins bash

#exit the container
exit

# Update package lists
apt update

# Install OpenJDK 17
apt install -y openjdk-17-jdk

# Verify installation
java -version

Install maven in jenkins
# Access the container as root
docker exec -u 0 -it jenkins bash

#exit the container
exit

# Install Maven
apt update
apt install -y maven

# Verify
mvn -v

javahome
/opt/java/openjdk


install docker
docker exec -u 0 -it jenkins bash
app-get update
apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
mkdir -m 0755 -p /etc/apt/keyrings

----------
PIPELINE
tools:

    maven:

HOw to check out source code from github
    click on "pipeline syntax"
    select "checkout from vrsion control"
    url : https://github.com/mohammedhassan1998/Order-Microservice.git
    branch: main
    creadentials: create one then select it
    username: PhuocQuang76
    password: token
    click "Generate Pipeline Script"
    -> it will generate the pipeline script , then copy and paste it to jenkins pipeline

----
checkout scmGit(
    branches: [[name: '*/main']],
    extensions: [],
    userRemoteConfigs: [[
        credentialsId: 'a9224474-5548-459c-91bd-260c3a66375c',
        url: 'https://github.com/PhuocQuang76/order-ms.git'
    ]]
)
----




after this
docker build -t my-jenkins -f Dockerfile.jenkins .

# Run the container


# Stop and remove existing Jenkins container if running
docker stop jenkins 2>/dev/null || true
docker rm jenkins 2>/dev/null || true

# Start Jenkins with the correct Docker socket path
docker run -d \
  --name jenkins \
  -p 9090:8080 \
  -p 50000:50000 \
  -v jenkins_home:/var/jenkins_home \
  -v /Users/aileen/.docker/run/docker.sock:/var/run/docker.sock \
  -v /usr/local/bin/docker:/usr/bin/docker \
  --group-add $(stat -f %g /Users/aileen/.docker/run/docker.sock) \
  --privileged \
  jenkins/jenkins:lts-jdk17






pipeline {
    agent any  // Changed from docker agent to any

        tools {
            maven 'maven'
            jdk 'jdk17'
        }

        environment {
            DOCKER_HUB_REPO = 'quanghongphuoc/order-ms'
            DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
        }

    environment {
        DOCKER_HUB_REPO = 'quanghongphuoc/order-ms'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/PhuocQuang76/order-ms.git'
                    ]]
                ])
            }
        }

        stage('Build and Test') {
                    agent {
                        docker {
                            image 'maven:3.9.6-eclipse-temurin-17'
                            args '-v /root/.m2:/root/.m2'  // Cache Maven dependencies
                            reuseNode true
                        }
                    }
                    steps {
                        sh 'mvn clean package'
                        junit '**/target/surefire-reports/**/*.xml'
                        stash includes: 'target/*.jar', name: 'app-jar'  // Save the JAR
                    }
                }

                stage('Build Docker Image') {
                    agent {
                        docker {
                            image 'docker:20.10.16-dind'  // Use Docker-in-Docker
                            args '--privileged'
                            reuseNode true
                        }
                    }
                    steps {
                        unstash 'app-jar'  // Get the JAR from previous stage
                        script {
                            // Create Dockerfile dynamically
                            writeFile file: 'Dockerfile', text: '''
                                FROM openjdk:17-jdk-slim
                                WORKDIR /app
                                COPY target/*.jar app.jar
                                EXPOSE 8088
                                ENTRYPOINT ["java", "-jar", "app.jar"]
                            '''

                            sh '''
                                ls -la target/
                                docker build -t ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG} .
                                docker images | grep ${DOCKER_HUB_REPO} || echo "No matching images found"
                            '''
                        }
                    }
                }


        stage('Push to Docker Hub') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKER_HUB_USERNAME',
                        passwordVariable: 'DOCKER_HUB_PASSWORD'
                    )]) {
                        sh """
                            echo "Logging into Docker Hub..."
                            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

                            echo "Tagging as latest..."
                            docker tag ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG} ${DOCKER_HUB_REPO}:latest

                            echo "Pushing version ${DOCKER_IMAGE_TAG}..."
                            docker push ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}

                            echo "Pushing latest..."
                            docker push ${DOCKER_HUB_REPO}:latest

                            echo "Successfully pushed to Docker Hub"
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}