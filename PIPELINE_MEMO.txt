
1) **************** EC2 JENKINS SERVER ******************
    * Create an ec2 (t2.medium)
        ps:Another ec2 instance for java application (t2.micro)

    * Update the package list to get the latest package information:
  	    sudo apt update

    * Install OpenJDK 17 (Java Development Kit):
  	    sudo apt install openjdk-17-jdk

    * install Maven
	    sudo apt install maven

    * install docker
        sudo apt-get install docker.io

    * Install kubectl
              curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
              echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
              sudo apt-get update
              sudo apt-get install -y kubectl
              kubectl version --client

    * Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip
          sudo unzip awscliv2.zip
          sudo ./aws/install
          aws --version

    * install jenkins
        + Download the Jenkins repository key and save it to/usr/share/keyrings/jenkins-keyring.asc:
  	        curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee   /usr/share/keyrings/jenkins-keyring.asc > /dev/null

        + Add the Jenkins repository to the system's package sources list:
  	        echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]   https://pkg.jenkins.io/debian binary/ | sudo tee   /etc/apt/sources.list.d/jenkins.list > /dev/null

        + Update the package list again to include the Jenkins repository:
  	        sudo apt-get update

        + Install Jenkins using apt-get with automatic "yes" to prompts:
  	        sudo apt-get install jenkins -y

        + Check Jenkins version
  	        jenkins --version

        + Get password to Login Jenkins
  	        sudo cat /var/lib/jenkins/secrets/initialAdminPassword
            ->72fa74eb8b4a4034a7b9c688cc41b781


    * Go to jenkins server
	    Sudo su Jenkins

        ( Commend:
            The Jenkins user doesn't have permission to access the Docker daemon socket.
            This is a common security configuration in Linux systems.

        + Add jenkins user to docker group
            sudo usermod -aG docker jenkins

        + Restart Jenkins
            sudo systemctl restart jenkins)

    * Edit inbound route to open web browser
	    CustomTCP 8080 everywhere

			———
    * Open jenkinUI on browser
	    http://ec2publicIP:8080
	    Then work with password …

       + Install Plugin
           docker
           docker-pipeline
           Kubernetes Deploy plugin or Kubernetes Continuous Deploy Plugin
           Kubernetes CLI Plugin


       + Add credentials
            manage Jenkins / Credentials / System / Global credentials
            "add docker hub credentials"
            "add github credentials"
            "add Kubernetes credentials"
                kind: kubernetes configuration

                PS: Get cluster config content
                sudo cat ~/.kube/config
                or
                sudo -u jenkins cat /var/lib/jenkins/.kube/config
                    copy all of them and paste to kubernetes credentials

                ID: K8S
                description: "K8S"

    * set a clusterrole as cluster-admin
        By default, clusterrolebinding has system:anonymous set which blocks the cluster access.
        Execute the following command to set a clusterrole as cluster-admin which will give you
        the required access.

        kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=system:anonymous


    * Settool
        + jdk:
            add jdk
            name: jdk17
        + maven:
            name: maven

************** ESK SET UP IAM authenticat *************
    * Create



************* PIPELINE ***********
pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'jdk17'  // Make sure this matches the exact name in Jenkins Global Tool Configuration
    }

    environment {
        DOCKER_HUB_REPO = 'quanghongphuoc/order-ms'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
        AWS_REGION = 'us-west-2'
        CLUSTER_NAME = 'order-ms-cluster'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',
                        url: 'https://github.com/PhuocQuang76/order-ms.git'
                    ]]
                ])
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                   dockerImage = docker.build registry
                   dockerImage.tag("$BUILD_NUMBER")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "Pushing to Docker Hub..."
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-credentials',
                        usernameVariable: 'DOCKER_HUB_USERNAME',
                        passwordVariable: 'DOCKER_HUB_PASSWORD'
                    )]) {
                        sh """
                            echo "Logging into Docker Hub..."
                            echo \"$DOCKER_HUB_PASSWORD\" | docker login -u \"$DOCKER_HUB_USERNAME\" --password-stdin

                            echo "Pushing images to Docker Hub..."
                            docker push ${env.DOCKER_HUB_REPO}:${env.DOCKER_IMAGE_TAG}
                            docker push ${env.DOCKER_HUB_REPO}:latest

                            echo "Images pushed successfully!"
                        """
                    }
                }
            }
        }

        stage ('K8S Deploy') {
             kubernetesDeploy(
                 configs: 'order-ms/deployment.yaml',
                 kubeconfigId: 'K8S',
                 enableConfigSubstitution: true
             )
        }

        post {
            always {
                script {
                    // Clean up Docker images to save disk space
                    sh '''
                        echo "Cleaning up Docker resources..."
                        docker system prune -af --volumes || true
                        echo "Cleanup complete"
                    '''
                }
            }
        }
    }
}

************ Verify ************
kubectl get pods
kubectl get deployments
kubectl get services

************ Access the app in K8S cluster ************
kubectl geet svc
will give you external_IP
copy that uri and paste to browser
uri:8088
Once build is successful, go to browser and enter master or worker node public ip address along with port number mentioned above
http://master_or_worker_node_public_ipaddress:port_no_from_above




JUST MEMO ABOUT SETUP
************** EKS  **************
  - elastic kubernetes service
  https://aws.amazon.com/eks/
  - maintaining master node
  - Install Control Plan (MAster Node)process
     + API server : responsible for handling API requests
     + controller manager : responsible for creating pods and services
     + scheduler : responsible for scheduling pods.
     + etcd : is a distributed key-value store used to store the state of the cluster
  - WOrker NOde
     + self-managed node
        - all worker nodes process must be instaled
           - kubelet
           - kube-proxy
           - container runtime
        - update and security patches are the user's responsibility
        - Register the nodes with the control plane
     + Managed node group
        - automates the provvisioning and lifecycle management of ec2 nodes
        - manged nodes run eks optimized images
        - streamline way to manage lifecycle of nodes using single aws/eks API call
            - create
            - update
            - terminate
        - Evry modes is part of an auto scaling group that mansged for you by eks
     + fargate
        - no need to configure any ec2 instances
        - fargate will create worker node for you on demand
     + What need to create eks cluster
       -name, k8s version,
       - iam role for cluster
          - provision nodes
          - storage
          - secrte
       - vpc,
       - subnets,
       - security group for cluster
       - Node group
           - instance type
           - instance count
           - which cluster to connect

     + Connect to cluster
        - aws cli
        - kubectl


************** TERRAFORM **************
 + install terraform in local machine
    https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli
 + install aws cli in local machine
    https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
 + connect terraform with aws cli
    aws configure
    ts very easy to connect Terraform with AWS. Run `aws configure` command and provide the AWS Security credentials as shown in the video.

 + Clone the repository and Run `terraform init`. This will intialize the terraform environment for you and download the modules, providers and other configuration required.Add commentMore actions
    terraform init

+ Optionally review the terraform configuration
    Run `terraform plan` to see the configuration it creates when executed.

+  ### Finally, Apply terraform configuation to create EKS cluster with VPC
   `terraform apply`

---
  GO TO AWS EKS
  click on cluster name:
  add authorization
  so you are able to se nodes in the cluster
  + Click access tab/ create access entry
     select IAM principal ARN : arn:aws:iam::011243863866:user/aileen
     typ : standard
     policy name: AmazonEKSClusterAdminPolicy
     click "add policy"
     Create
  + Click computet tab

=------------------------\

************** JENKINS **************
* Add login awsinformation to credentials
    manage Jenkins / Credentials / System / Global credentials
    "add Credentials"
        - add access key
        kind: username password
        scope: "GLOBAL"
        secret: inputaws secret key
        id: "AWS_ACCESS_KEY_ID"
        description: "AWS_ACCESS_KEY_ID"
    "add Credentials"
        - add secret key
        kind: username password
        scope: "GLOBAL"
        secret: inputaws secret key
        id: "AWS_SECRET_ACCESS_KEY"
        description: "AWS_SECRET_ACCESS_KEY"
   ****  add AWS crediantials plugin
   ---
       add access key and secret key to jenkins
       system > manage jenkins > credentials
       kind: aws credentials
       scope: global
       id: aws-credentials
       id: aws-credentials
       aws access key id
       aws secret access key
   ----


------------------------
  deployment.yaml
  yaml
  CopyInsert
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: order-service
    namespace: order-service
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: order-service
    template:
      metadata:
        labels:
          app: order-service
      spec:
        containers:
        - name: order-service
          image: quanghongphuoc/order-ms:${DOCKER_IMAGE_TAG}
          ports:
          - containerPort: 8080
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: "prod"
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
  service.yaml
  yaml
  CopyInsert
  apiVersion: v1
  kind: Service
  metadata:
    name: order-service
    namespace: order-service
  spec:
    type: ClusterIP
    ports:
    - port: 80
      targetPort: 8080
    selector:
      app: order-service


  3. Required Jenkins Plugins
  Make sure these plugins are installed:

  AWS Credentials Plugin
  AWS CLI
  Kubernetes CLI (kubectl) Plugin
  Pipeline: AWS Steps
  4. EKS Worker Node IAM Role
  Ensure your EKS worker nodes have the proper IAM role with these policies:

  AmazonEKSWorkerNodePolicy
  AmazonEKS_CNI_Policy
  AmazonEC2ContainerRegistryReadOnly

  5. Security Considerations
  Secrets Management:
  Store sensitive data in Kubernetes Secrets
  Use AWS Secrets Manager or Parameter Store for production
  Network Policies:
  Implement NetworkPolicies to control pod-to-pod communication
  Use security groups to restrict cluster access
  IAM Roles for Service Accounts (IRSA):
  Use IAM roles for service accounts instead of instance profiles
  This provides fine-grained permissions for pods



    Directory Structure:
    CopyInsert
    your-project/
    ├── k8s/
    │   ├── deployment.yaml
    │   ├── service.yaml
    │   ├── ingress.yaml
    │   └── secrets.yaml
    └── Jenkinsfile



    sudo -u jenkins cat /var/lib/jenkins/.kube/config
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJRllwTFhwMHRad2N3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBMk1UQXlNekkwTVRWYUZ3MHpOVEEyTURneU16STVNVFZhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUN3NS8wRS9CN2xHWTN6NmtOUEZWOEtyVDFER3FJeWM4VFR6YmJUZ1V1TEM4dHprTGpmb01GSjZzR2EKVUd0d29NUkVBTzJFNXB3WDY5bnJibTZSbmpORy9FV2VjSW1kbFB0L0lNaEtQTnVjMkpWeVljRUh5SWFVdlMwSwpWanFjcHVkVG1TOWhjd0o4Z3AyU2VJYUdNR2J4dGFVOHZleUNzM214VHZLMTB4aFZrRkdxSDJVTG5UQlJQTlUzCjVpTmlzUzJXZ0k1QmhKRHhBOUgwRDFldWN2aC9qQmtKZGoySnZJYm13TWp2S215d2ppYi9SUHJjdldnWWRoTXIKOEgzOXMrUGVXbU5OSFlRNzN6T3NRZ3NVNVJ4aWRYa1krZ29kQU1kTzJVWjhMODc1SkJ4Z3QvQUNGb0x0dS8vaQpCaXNtNHN1MGErcHVPbjJocVdRZm1TRmpsWE9uQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSV1A3dnJUME1ISFF3L2ZsMXdFenBnTVpwWjhEQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQW5UNEFxM2hkcgorQzZNY09Yb0JXQ1M5ZlhWallNTmRBUE1MY0xuYXBKamNxZ25QenVHTGIram8ybmxxTFVVS09rWTNFRERrTXp0CjVuOHdlcFJnTFhYVkV3OEUwK3Jhc2IyS1FrdVJUVURvVHYzR3NjWUo4NVJ0K0o2SHJ1cFliRmRKSEtUbGRwSUoKK2Rka2hOU3grZW50b2t5MnFPTjBtS3JKa1d3TTUrZHFnaWhsY3g5TThzWEEyQzU0dDU3QzVqRmlhYlA1ZFovYgpnam1sY2lNTldWblhDak83bnZSSk8rRy8yME1pdlROKzZpaXNoOEtrMVAwcU9hMGhzQ1U0U0c2eStHN2pjOG14CkhZVkJOeGc2V3l1YVRWd3hZcnhSZis4VVNkNGZsYm04M1hxd2ZwVHJTMUlRVFRNYmNoU25yVndLQUMraUVVWm0KeS9VMjRya0t6dk1RCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
        server: https://0F41AC1205AA0C560BE053CE545B68DD.gr7.us-west-2.eks.amazonaws.com
      name: arn:aws:eks:us-west-2:011243863866:cluster/order-ms-cluster
    contexts:
    - context:
        cluster: arn:aws:eks:us-west-2:011243863866:cluster/order-ms-cluster
        user: arn:aws:eks:us-west-2:011243863866:cluster/order-ms-cluster
      name: arn:aws:eks:us-west-2:011243863866:cluster/order-ms-cluster
    current-context: arn:aws:eks:us-west-2:011243863866:cluster/order-ms-cluster
    kind: Config
    preferences: {}
    users:
    - name: arn:aws:eks:us-west-2:011243863866:cluster/order-ms-cluster
      user:
        exec:
          apiVersion: client.authentication.k8s.io/v1beta1
          args:
          - --region
          - us-west-2
          - eks
          - get-token
          - --cluster-name
          - order-ms-cluster
          - --output
          - json
          command: aws


 PIPELINE
 tools:
     maven: 'maven'
     jdk 'jdk17'

 HOw to check out source code from github
     click on "pipeline syntax"
     select "checkout from vrsion control"
     url : https://github.com/mohammedhassan1998/Order-Microservice.git
     branch: main
     creadentials: create one then select it
     username: PhuocQuang76
     password: token
     click "Generate Pipeline Script"
     -> it will generate the pipeline script , then copy and paste it to jenkins pipeline

 ----
 checkout scmGit(
     branches: [[name: '*/main']],
     extensions: [],
     userRemoteConfigs: [[
         credentialsId: 'a9224474-5548-459c-91bd-260c3a66375c',
         url: 'https://github.com/PhuocQuang76/order-ms.git'
     ]]
 )
 ----

 ******************** DOCKER *******************
 docker build -t my-jenkins -f Dockerfile.jenkins .

 # Run the container

 # Stop and remove existing Jenkins container if running
 docker stop jenkins 2>/dev/null || true
 docker rm jenkins 2>/dev/null || true

 # Start Jenkins with the correct Docker socket path
 docker run -d -p 9090:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home --name jenkins jenkins/jenkins:lts

 docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword

 docker exec -it jenkins bash
 cat /var/jenkins_home/secrets/initialAdminPassword



choui
2 trung ga
200 ml nuoc cot dua
120 sua tuoi
80g bo

40g bot mi, or bot gao, bot bap
160 do c
60ml sua dac
nuong 90p
60p phu giay bac

